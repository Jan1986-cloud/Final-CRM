# API Contract for Final CRM

# AUTHENTICATION
POST /api/auth/login:
  description: Authenticate a user and return a JWT token.
  request:
    required: [password]
    oneOf:
      - required: [email]
      - required: [username]
    properties:
      email: {type: string, format: email}
      username: {type: string}
      password: {type: string}
  response:
    properties:
      message: {type: string}
      token: {type: string}
      user:
        type: object
        properties:
          id: {type: string, format: uuid}
          username: {type: string}
          email: {type: string, format: email}
          full_name: {type: string}
          role: {type: string}
          company_id: {type: string, format: uuid}
          company_name: {type: string}

POST /api/auth/register:
  description: Register a new company and admin user.
  request:
    required: [company_name, email, password]
    properties:
      company_name: {type: string}
      email: {type: string, format: email}
      password: {type: string}
      first_name: {type: string}
      last_name: {type: string}
  response:
    properties:
      message: {type: string}
      token: {type: string}
      user:
        type: object
        properties:
          id: {type: string, format: uuid}
          email: {type: string, format: email}
          company_id: {type: string, format: uuid}

POST /api/auth/logout:
  description: Logout the user (no action needed on server for JWT).
  response:
    properties:
      message: {type: string}

GET /api/auth/me:
  description: Get the current authenticated user's details.
  response:
    properties:
      user:
        type: object
        properties:
          id: {type: string, format: uuid}
          username: {type: string}
          email: {type: string, format: email}
          first_name: {type: string}
          last_name: {type: string}
          role: {type: string}
          company_id: {type: string, format: uuid}

POST /api/auth/change-password:
  description: Change the current user's password.
  request:
    required: [current_password, new_password]
    properties:
      current_password: {type: string}
      new_password: {type: string}
  response:
    properties:
      message: {type: string}

# ARTICLES
GET /api/articles:
  description: Get a paginated list of articles.
  response:
    properties:
      articles: {type: array, items: {type: object}}
      pagination: {type: object}

GET /api/articles/{article_id}:
  description: Get a single article by its ID.
  response:
    properties:
      article: {type: object}

POST /api/articles:
  description: Create a new article.
  request:
    required: [code, name, selling_price]
    properties:
      code: {type: string}
      name: {type: string}
      description: {type: string}
      unit: {type: string}
      purchase_price: {type: number}
      selling_price: {type: number}
      vat_rate: {type: number}
      stock_quantity: {type: number}
      min_stock_level: {type: number}
      supplier: {type: string}
      supplier_code: {type: string}
      category_id: {type: string, format: uuid}
  response:
    properties:
      message: {type: string}
      article_id: {type: string, format: uuid}

PUT /api/articles/{article_id}:
  description: Update an existing article.
  request:
    properties:
      code: {type: string}
      name: {type: string}
      description: {type: string}
      unit: {type: string}
      purchase_price: {type: number}
      selling_price: {type: number}
      vat_rate: {type: number}
      stock_quantity: {type: number}
      min_stock_level: {type: number}
      supplier: {type: string}
      supplier_code: {type: string}
      is_active: {type: boolean}
      category_id: {type: string, format: uuid}
  response:
    properties:
      message: {type: string}

# ARTICLE CATEGORIES
GET /api/articles/categories:
  description: Get all article categories for the company.
  response:
    properties:
      categories: {type: array, items: {type: object}}

POST /api/articles/categories:
  description: Create a new article category.
  request:
    required: [name]
    properties:
      name: {type: string}
      description: {type: string}
  response:
    properties:
      message: {type: string}
      category_id: {type: string, format: uuid}

# STOCK
POST /api/articles/stock-adjustment:
  description: Adjust the stock quantity of an article.
  request:
    required: [article_id, adjustment]
    properties:
      article_id: {type: string, format: uuid}
      adjustment: {type: number}
  response:
    properties:
      message: {type: string}
      new_quantity: {type: number}

# CUSTOMERS
GET /api/customers:
  description: Get a paginated list of customers.
  response:
    properties:
      customers: {type: array, items: {type: object}}
      pagination: {type: object}

GET /api/customers/{customer_id}:
  description: Get a single customer by their ID, including locations.
  response:
    properties:
      customer: {type: object}

POST /api/customers:
  description: Create a new customer.
  request:
    required: [company_name]
    properties:
      company_name: {type: string}
      contact_person: {type: string}
      email: {type: string, format: email}
      phone: {type: string}
      mobile: {type: string}
      address: {type: string}
      postal_code: {type: string}
      city: {type: string}
      country: {type: string}
      vat_number: {type: string}
      payment_terms: {type: integer}
      credit_limit: {type: number}
      notes: {type: string}
  response:
    properties:
      message: {type: string}
      customer_id: {type: string, format: uuid}

PUT /api/customers/{customer_id}:
  description: Update an existing customer.
  request:
    properties:
      company_name: {type: string}
      contact_person: {type: string}
      email: {type: string, format: email}
      phone: {type: string}
      mobile: {type: string}
      address: {type: string}
      postal_code: {type: string}
      city: {type: string}
      country: {type: string}
      vat_number: {type: string}
      payment_terms: {type: integer}
      credit_limit: {type: number}
      notes: {type: string}
      is_active: {type: boolean}
  response:
    properties:
      message: {type: string}

DELETE /api/customers/{customer_id}:
  description: Soft delete a customer by setting them to inactive.
  response:
    properties:
      message: {type: string}

# LOCATIONS
GET /api/customers/{customer_id}/locations:
  description: Get all active locations for a specific customer.
  response:
    properties:
      locations: {type: array, items: {type: object}}

POST /api/customers/{customer_id}/locations:
  description: Create a new location for a customer.
  request:
    required: [address]
    properties:
      name: {type: string}
      address: {type: string}
      postal_code: {type: string}
      city: {type: string}
      country: {type: string}
      contact_person: {type: string}
      phone: {type: string}
      access_instructions: {type: string}
      notes: {type: string}
  response:
    properties:
      message: {type: string}
      location_id: {type: string, format: uuid}

# QUOTES
GET /api/quotes:
  description: Get a paginated list of quotes.
  response:
    properties:
      quotes: {type: array, items: {type: object}}
      pagination: {type: object}

GET /api/quotes/{quote_id}:
  description: Get a single quote by its ID, including lines.
  response:
    properties:
      quote: {type: object}

POST /api/quotes:
  description: Create a new quote.
  request:
    required: [customer_id]
    properties:
      customer_id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      title: {type: string}
      description: {type: string}
      quote_date: {type: string, format: date}
      valid_until: {type: string, format: date}
      notes: {type: string}
      terms_conditions: {type: string}
      lines: {type: array, items: {type: object}}
  response:
    properties:
      message: {type: string}
      quote_id: {type: string, format: uuid}
      quote_number: {type: string}

PUT /api/quotes/{quote_id}:
  description: Update an existing quote.
  request:
    properties:
      customer_id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      title: {type: string}
      description: {type: string}
      quote_date: {type: string, format: date}
      valid_until: {type: string, format: date}
      status: {type: string}
      notes: {type: string}
      terms_conditions: {type: string}
      lines: {type: array, items: {type: object}}
  response:
    properties:
      message: {type: string}

PUT /api/quotes/{quote_id}/status:
  description: Update the status of a quote.
  request:
    required: [status]
    properties:
      status: {type: string}
  response:
    properties:
      message: {type: string}

POST /api/quotes/{quote_id}/duplicate:
  description: Duplicate an existing quote.
  response:
    properties:
      message: {type: string}
      quote_id: {type: string, format: uuid}
      quote_number: {type: string}

# WORK ORDERS
GET /api/work-orders:
  description: Get a paginated list of work orders.
  response:
    properties:
      work_orders: {type: array, items: {type: object}}
      pagination: {type: object}

GET /api/work-orders/{work_order_id}:
  description: Get a single work order by its ID.
  response:
    properties:
      work_order: {type: object}

POST /api/work-orders:
  description: Create a new work order.
  request:
    required: [customer_id, title]
    properties:
      customer_id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      quote_id: {type: string, format: uuid}
      title: {type: string}
      description: {type: string}
      work_date: {type: string, format: date}
      status: {type: string}
      technician_id: {type: string, format: uuid}
      notes: {type: string}
      lines: {type: array, items: {type: object}}
  response:
    properties:
      message: {type: string}
      work_order_id: {type: string, format: uuid}
      work_order_number: {type: string}

PUT /api/work-orders/{work_order_id}/status:
  description: Update the status of a work order.
  request:
    required: [status]
    properties:
      status: {type: string}
  response:
    properties:
      message: {type: string}

PATCH /api/work-orders/{work_order_id}/complete:
  description: Mark a work order as complete.
  response:
    properties:
      message: {type: string}

# TIME ENTRIES
POST /api/work-orders/{work_order_id}/time-entries:
  description: Add a time entry to a work order.
  request:
    required: [user_id, date, start_time, end_time]
    properties:
      user_id: {type: string, format: uuid}
      date: {type: string, format: date}
      start_time: {type: string, format: time}
      end_time: {type: string, format: time}
      is_billable: {type: boolean}
      hourly_rate: {type: number}
      vat_rate: {type: number}
  response:
    properties:
      message: {type: string}
      time_entry_id: {type: string, format: uuid}

# INVOICES
GET /api/invoices:
  description: Get a paginated list of invoices.
  response:
    properties:
      invoices: {type: array, items: {type: object}}
      pagination: {type: object}

GET /api/invoices/{invoice_id}:
  description: Get a single invoice by its ID.
  response:
    properties:
      invoice: {type: object}

POST /api/invoices:
  description: Create a new invoice.
  request:
    required: [customer_id, invoice_lines]
    properties:
      customer_id: {type: string, format: uuid}
      invoice_date: {type: string, format: date}
      payment_terms: {type: integer}
      status: {type: string}
      notes: {type: string}
      work_order_ids: {type: array, items: {type: string, format: uuid}}
      invoice_lines: {type: array, items: {type: object}}
  response:
    properties:
      id: {type: string, format: uuid}
      invoice_number: {type: string}
      total_amount: {type: number}
      message: {type: string}

PUT /api/invoices/{invoice_id}:
  description: Update an existing invoice.
  request:
    properties:
      invoice_date: {type: string, format: date}
      due_date: {type: string, format: date}
      status: {type: string}
      payment_terms: {type: integer}
      notes: {type: string}
      work_order_ids: {type: array, items: {type: string, format: uuid}}
      invoice_lines: {type: array, items: {type: object}}
  response:
    properties:
      id: {type: string, format: uuid}
      invoice_number: {type: string}
      message: {type: string}

DELETE /api/invoices/{invoice_id}:
  description: Delete a draft invoice.
  response:
    properties:
      message: {type: string}

POST /api/invoices/from-work-orders:
  description: Create a combined invoice from multiple work orders.
  request:
    required: [work_order_ids]
    properties:
      work_order_ids: {type: array, items: {type: string, format: uuid}}
      payment_terms: {type: integer}
  response:
    properties:
      id: {type: string, format: uuid}
      invoice_number: {type: string}
      total_amount: {type: number}
      work_orders_count: {type: integer}
      message: {type: string}