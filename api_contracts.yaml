# API Contract for Final CRM - Single Source of Truth
# Version: 2.1
# Last updated: 2025-07-12
# Notes: This version is synchronized with the full list of routes from the Flask app.
# Next step is to fill in all the 'TODO' sections for request/response schemas.

# --- Schemas -----------------------------------------------------------------
schemas:
  Pagination:
    type: object
    properties:
      page: {type: integer, description: "Current page number"}
      pages: {type: integer, description: "Total number of pages"}
      per_page: {type: integer, description: "Items per page"}
      total: {type: integer, description: "Total number of items"}
      has_next: {type: boolean, description: "True if there is a next page"}
      has_prev: {type: boolean, description: "True if there is a previous page"}

  Article:
    type: object
    properties:
      id: {type: string, format: uuid}
      code: {type: string}
      name: {type: string}
      description: {type: string, nullable: true}
      unit: {type: string, nullable: true}
      purchase_price: {type: number, nullable: true}
      selling_price: {type: number}
      vat_rate: {type: number}
      stock_quantity: {type: number}
      min_stock_level: {type: number}
      supplier: {type: string, nullable: true}
      supplier_code: {type: string, nullable: true}
      is_active: {type: boolean}
      category_id: {type: string, format: uuid, nullable: true}
      category_name: {type: string, nullable: true}
      is_low_stock: {type: boolean, readOnly: true}
      created_at: {type: string, format: date-time, readOnly: true}

  ArticleCategory:
    type: object
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      description: {type: string, nullable: true}
      article_count: {type: integer, readOnly: true}

  Customer:
    type: object
    properties:
      id: {type: string, format: uuid}
      company_name: {type: string}
      contact_person: {type: string, nullable: true}
      email: {type: string, format: email, nullable: true}
      phone: {type: string, nullable: true}
      mobile: {type: string, nullable: true}
      address: {type: string, nullable: true}
      postal_code: {type: string, nullable: true}
      city: {type: string, nullable: true}
      country: {type: string, nullable: true}
      vat_number: {type: string, nullable: true}
      payment_terms: {type: integer, nullable: true}
      credit_limit: {type: number, nullable: true}
      notes: {type: string, nullable: true}
      is_active: {type: boolean}
      created_at: {type: string, format: date-time, readOnly: true}
      location_count: {type: integer, readOnly: true}

  Location:
    type: object
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      address: {type: string}
      postal_code: {type: string, nullable: true}
      city: {type: string, nullable: true}
      country: {type: string, nullable: true}
      contact_person: {type: string, nullable: true}
      phone: {type: string, nullable: true}
      access_instructions: {type: string, nullable: true}
      notes: {type: string, nullable: true}
      is_active: {type: boolean}

# --- Endpoints ---------------------------------------------------------------

GET /:
  description: "TODO: Document this endpoint"
  response:
    properties:
      message: {type: string}

GET /health:
  description: "Health check endpoint."
  response:
    properties:
      status: {type: string}

# AUTH
POST /api/auth/register:
  description: Register a new company and admin user.
  request:
    required: [company_name, email, password, username, first_name, last_name]
    properties:
      company_name: {type: string}
      username: {type: string}
      email: {type: string, format: email}
      password: {type: string}
      first_name: {type: string}
      last_name: {type: string}
  response:
    properties:
      message: {type: string}
      token: {type: string}
      user: {type: object} # TODO: Define user schema

POST /api/auth/login:
  description: Authenticate a user and return a JWT token.
  request:
    required: [password]
    oneOf:
      - required: [email]
      - required: [username]
    properties:
      email: {type: string, format: email}
      username: {type: string}
      password: {type: string}
  response:
    properties:
      message: {type: string}
      token: {type: string}
      user: {type: object} # TODO: Define user schema

GET /api/auth/me:
  description: Get the current authenticated user's details.
  response:
    properties:
      user: {type: object} # TODO: Define user schema

POST /api/auth/logout:
  description: "TODO: Document this endpoint"
  response:
    properties:
      message: {type: string}

POST /api/auth/change-password:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties:
      message: {type: string}

# ARTICLES
GET /api/articles:
  description: Get a paginated list of articles.
  response:
    properties:
      articles:
        type: array
        items:
          $ref: "#/schemas/Article"
      pagination:
        $ref: "#/schemas/Pagination"

POST /api/articles:
  description: Create a new article.
  request:
    required: [code, name, selling_price]
    properties:
      code: {type: string}
      name: {type: string}
      description: {type: string, nullable: true}
      unit: {type: string, nullable: true}
      purchase_price: {type: number, nullable: true}
      selling_price: {type: number}
      vat_rate: {type: number, nullable: true}
      stock_quantity: {type: number, nullable: true}
      min_stock_level: {type: number, nullable: true}
      supplier: {type: string, nullable: true}
      supplier_code: {type: string, nullable: true}
      category_id: {type: string, format: uuid, nullable: true}
  response:
    properties:
      message: {type: string}
      article_id: {type: string, format: uuid}

GET /api/articles/categories:
  description: Get all article categories for the company.
  response:
    properties:
      categories:
        type: array
        items:
          $ref: "#/schemas/ArticleCategory"

POST /api/articles/categories:
  description: Create a new article category.
  request:
    required: [name]
    properties:
      name: {type: string}
      description: {type: string, nullable: true}
  response:
    properties:
      message: {type: string}
      category_id: {type: string, format: uuid}

POST /api/articles/stock-adjustment:
  description: Adjust the stock quantity of an article.
  request:
    required: [article_id, adjustment]
    properties:
      article_id: {type: string, format: uuid}
      adjustment: {type: number}
  response:
    properties:
      message: {type: string}
      new_quantity: {type: number}

GET /api/articles/{article_id}:
  description: Get a single article by its ID.
  response:
    properties:
      article:
        $ref: "#/schemas/Article"

PUT /api/articles/{article_id}:
  description: Update an existing article.
  request:
    properties:
      code: {type: string}
      name: {type: string}
      description: {type: string, nullable: true}
      unit: {type: string, nullable: true}
      purchase_price: {type: number, nullable: true}
      selling_price: {type: number}
      vat_rate: {type: number, nullable: true}
      stock_quantity: {type: number, nullable: true}
      min_stock_level: {type: number, nullable: true}
      supplier: {type: string, nullable: true}
      supplier_code: {type: string, nullable: true}
      is_active: {type: boolean}
      category_id: {type: string, format: uuid, nullable: true}
  response:
    properties:
      message: {type: string}

# COMPANIES
GET /api/companies:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

POST /api/companies:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

DELETE /api/companies/{company_id}:
  description: "TODO: Document this endpoint"
  response:
    properties:
      message: {type: string}

GET /api/companies/{company_id}:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

PUT /api/companies/{company_id}:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

GET /api/companies/{company_id}/settings:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

# CUSTOMERS
GET /api/customers:
  description: Get a paginated list of customers.
  response:
    properties:
      customers:
        type: array
        items:
          $ref: "#/schemas/Customer"
      pagination:
        $ref: "#/schemas/Pagination"

POST /api/customers:
  description: Create a new customer.
  request:
    required: [company_name]
    properties:
      company_name: {type: string}
      contact_person: {type: string, nullable: true}
      email: {type: string, format: email, nullable: true}
      phone: {type: string, nullable: true}
      mobile: {type: string, nullable: true}
      address: {type: string, nullable: true}
      postal_code: {type: string, nullable: true}
      city: {type: string, nullable: true}
      country: {type: string, nullable: true}
      vat_number: {type: string, nullable: true}
      payment_terms: {type: integer, nullable: true}
      credit_limit: {type: number, nullable: true}
      notes: {type: string, nullable: true}
  response:
    properties:
      message: {type: string}
      customer_id: {type: string, format: uuid}

DELETE /api/customers/{customer_id}:
  description: Soft delete a customer by setting them to inactive.
  response:
    properties:
      message: {type: string}

GET /api/customers/{customer_id}:
  description: Get a single customer by their ID, including locations.
  response:
    properties:
      customer:
        allOf:
          - $ref: "#/schemas/Customer"
          - type: object
            properties:
              locations:
                type: array
                items:
                  $ref: "#/schemas/Location"

PUT /api/customers/{customer_id}:
  description: Update an existing customer.
  request:
    properties:
      company_name: {type: string}
      contact_person: {type: string, nullable: true}
      email: {type: string, format: email, nullable: true}
      phone: {type: string, nullable: true}
      mobile: {type: string, nullable: true}
      address: {type: string, nullable: true}
      postal_code: {type: string, nullable: true}
      city: {type: string, nullable: true}
      country: {type: string, nullable: true}
      vat_number: {type: string, nullable: true}
      payment_terms: {type: integer, nullable: true}
      credit_limit: {type: number, nullable: true}
      notes: {type: string, nullable: true}
      is_active: {type: boolean}
  response:
    properties:
      message: {type: string}

GET /api/customers/{customer_id}/locations:
  description: Get all active locations for a specific customer.
  response:
    properties:
      locations:
        type: array
        items:
          $ref: "#/schemas/Location"

POST /api/customers/{customer_id}/locations:
  description: Create a new location for a customer.
  request:
    required: [address]
    properties:
      name: {type: string, nullable: true}
      address: {type: string}
      postal_code: {type: string, nullable: true}
      city: {type: string, nullable: true}
      country: {type: string, nullable: true}
      contact_person: {type: string, nullable: true}
      phone: {type: string, nullable: true}
      access_instructions: {type: string, nullable: true}
      notes: {type: string, nullable: true}
  response:
    properties:
      message: {type: string}
      location_id: {type: string, format: uuid}

# DOCUMENTS
GET /api/documents/download/{document_id}:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

POST /api/documents/generate:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

POST /api/documents/preview/{template_type}:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

GET /api/documents/templates:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

DELETE /api/documents/templates/{template_id}:
  description: "TODO: Document this endpoint"
  response:
    properties:
      message: {type: string}

# EXCEL
GET /api/excel/articles/export:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

POST /api/excel/articles/import:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

GET /api/excel/customers/export:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

POST /api/excel/customers/import:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

GET /api/excel/templates/articles:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

GET /api/excel/templates/customers:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

# INVOICES
GET /api/invoices:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

POST /api/invoices:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

POST /api/invoices/from-work-orders:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

GET /api/invoices/stats:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

DELETE /api/invoices/{invoice_id}:
  description: "TODO: Document this endpoint"
  response:
    properties:
      message: {type: string}

GET /api/invoices/{invoice_id}:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

PUT /api/invoices/{invoice_id}:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

# QUOTES
GET /api/quotes:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

POST /api/quotes:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

GET /api/quotes/{quote_id}:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

PUT /api/quotes/{quote_id}:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

POST /api/quotes/{quote_id}/duplicate:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

PUT /api/quotes/{quote_id}/status:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

# WORK ORDERS
GET /api/work-orders:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

POST /api/work-orders:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

GET /api/work-orders/stats:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

GET /api/work-orders/{work_order_id}:
  description: "TODO: Document this endpoint"
  response:
    properties: {} # TODO: Define response schema

PATCH /api/work-orders/{work_order_id}/complete:
  description: "TODO: Document this endpoint"
  response:
    properties:
      message: {type: string}

PUT /api/work-orders/{work_order_id}/status:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

POST /api/work-orders/{work_order_id}/time-entries:
  description: "TODO: Document this endpoint"
  request:
    properties: {} # TODO: Define request schema
  response:
    properties: {} # TODO: Define response schema

# Catch-all for frontend routing
GET /{path}:
  description: "Serves the frontend application."
  response:
    properties: {} # HTML content